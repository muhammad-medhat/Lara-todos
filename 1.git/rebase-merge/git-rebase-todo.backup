pick 9502aa4b7989fa7b0f544101e50abb0acf7f15a1 Initial commit
pick 421ac03466bc604cf02f9ed6c078612c21e91571 chhor: installing and compiling ui
pick c2bcc76e2ac8cf17b0eeb2d7f1f85dbad6e8a46f feat: create and  delete todos
pick dec1e825fbf619ca1af563254a2fd0a55165bd38 feat: all crud ops
pick d5ea200b4b2317a83f24672a3540f797eda4233a merge conflict

# Rebase a4d84cd..d5ea200 onto a4d84cd (5 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified); use -c <commit> to reword the commit message
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
